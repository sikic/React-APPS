{"version":3,"sources":["Components/Error.js","Components/Formulario.js","Components/Imagenes.js","Components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setbusqueda","useState","termino","settermino","error","seterror","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagenes","actual","largeImageURL","previewURL","likes","tags","views","src","alt","class","aria-role","aria-label","href","ListadoImagenes","lista","map","img","key","id","App","busqueda","imagenes","setimagenes","paginaActual","setpaginaActual","pagsTotal","setpagsTotal","useEffect","a","imagenesPorPagina","url","fetch","response","json","resultado","console","log","Math","ceil","totalHits","hits","document","querySelector","scrollIntoView","behavior","consultaApi","onClick","pagActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.342b22ed.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (\r\n        <div>\r\n            <p className=\"my-3 p-4 text-center alert alert-primary\">\r\n\r\n                {mensaje}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React,{useState} from 'react'\r\nimport Error from './Error'\r\nconst Formulario = ({setbusqueda}) => {\r\n\r\n    const [termino, settermino] = useState('');\r\n    const [error, seterror] = useState(false);\r\n\r\n    const buscarImagenes= e =>{\r\n        e.preventDefault();\r\n        //validar\r\n        if(termino.trim() === '')\r\n        return seterror(true);\r\n        seterror(false);\r\n        //enviar el termino a hacia el app.js\r\n        setbusqueda(termino);\r\n    }\r\n\r\n    return (\r\n        <form\r\n            onSubmit={buscarImagenes}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Busca una imagen , ejemplo: fútbol o café\"\r\n                        onChange={e => settermino(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-4\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-danger btn-block\"\r\n                        value=\"Buscar\"\r\n                    />\r\n                </div>\r\n            { error ? <Error mensaje=\"Agrega un término de búsqueda\"/> : null}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\nimport'./Imagenes.css'\r\nconst Imagenes = ({actual}) => {\r\n\r\n    const {largeImageURL,previewURL,likes,tags,views} = actual;\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <div className=\"content\">\r\n                 <img src={previewURL} alt ={tags} className=\"card-img-top\" />\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">\r\n                        {likes} <i class=\"icono em em---1\" aria-role=\"presentation\" aria-label=\"THUMBS UP SIGN\"></i>\r\n                    </p>\r\n\r\n                    <p className=\"card-text\">\r\n                        {views} <i class=\"em em-eyeglasses\" aria-role=\"presentation\" aria-label=\"EYEGLASSES\"></i>\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                    <a href={largeImageURL} className=\"btn btn-primary btn-block\"> ver imagen</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Imagenes\r\n","import React from 'react'\r\nimport Imagenes from './Imagenes'\r\n\r\nconst ListadoImagenes = ({lista}) => {\r\n    return (\r\n        <div className =\"col-12 p-5 row\">\r\n            {lista.map(img=>(\r\n                <Imagenes \r\n                    key={img.id}\r\n                    actual = {img}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListadoImagenes\r\n","import React,{useState,useEffect} from 'react';\nimport Formulario from './Components/Formulario'\nimport Listado from './Components/ListadoImagenes'\n\n\nfunction App() {\n\n  //state de la app\n  const [busqueda, setbusqueda] = useState('');\n  //imagenes\n  const [imagenes, setimagenes] = useState([]);\n\n  //paginador\n  //para la pagina actual \n  const [paginaActual, setpaginaActual] = useState(1);\n  //para paginas total\n  const [pagsTotal, setpagsTotal] = useState(1);\n  useEffect(() => {\n   if(busqueda === \"\") return;\n\n   const consultaApi = async () =>{\n\n    const imagenesPorPagina =30;\n    const key='15919471-a5a5f55b7cdeb945ee877e88e';\n    const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaActual}`;\n    const response = await fetch(url);\n    const resultado = await response.json();\n    console.log(resultado);\n    setpagsTotal(Math.ceil(resultado.totalHits/imagenesPorPagina));\n    setimagenes(resultado.hits);\n\n    //mover pantalla hasta arriba\n    const jumbotron = document.querySelector('.jumbotron');\n    jumbotron.scrollIntoView({ behavior: 'smooth' })\n   }\n   consultaApi();\n  }, [busqueda,paginaActual])\n\n  const paginaAnterior = () =>{\n    const pagActual = paginaActual - 1;\n    if(pagActual === 0)\n      return;\n\n    setpaginaActual(pagActual)\n  }\n\n  const paginaSiguiente = () =>{\n    const pagActual = paginaActual + 1;\n    if(pagActual > pagsTotal)\n      return;\n    \n    setpaginaActual(pagActual);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de imágenes </p>\n        <Formulario\n          setbusqueda={setbusqueda}\n        />\n      </div>\n\n      <div className=\"row justify-content-center\">\n        <Listado\n          lista={imagenes}\n        />\n\n       {(paginaActual === 1) ? null : (\n        <button\n          type=\"button\"\n          className=\"btn btn-info mr-1\"\n          onClick={paginaAnterior}\n        > &laquo; Anterior</button>)}\n\n      {(paginaActual === pagsTotal) ? null :\n      (  <button\n        type=\"button\"\n        className=\"btn btn-info\"\n        onClick={paginaSiguiente}\n      >Siguiente &raquo;</button>)\n      }\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}